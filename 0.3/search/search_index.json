{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Some Video SDK","text":"<p>The documentation of this SDK is handled by an independent MkDocs project, and the API reference is generated by Doxygen.</p> <p>This is version 0.3, but the documentation is almost the same as version 0.2. In general, this should not happen because a minor version bump should mean some non-breaking changes. However, this is just an example, so whatever.</p> <p>The pros and cons of this approach (how we handle the documentation) listed below.</p>"},{"location":"#pros","title":"Pros","text":"<p>In progress.</p>"},{"location":"#cons","title":"Cons","text":"<p>In progress.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>With <code>mike</code>, we can easily render a new version of the documentation and deploy it to the <code>gh-pages</code> (by default) branch.</p>"},{"location":"getting-started/#how-to-create-a-new-version-of-the-documentation-with-mike","title":"How to create a new version of the documentation with <code>mike</code>","text":"<p>First of all, we have to make sure that <code>mike</code> and <code>mkdocs-material</code> are installed in our environment. They can be installed with <code>pip</code> as below.</p> <p>Note</p> <p>The following commands install the packages to the global environment by default. If it is not desired, remember to activate any virtual environment you are using.</p> <pre><code>pip install mike mkdocs-material\n</code></pre> <p>Then, we have to make sure we are at the correct commit, which we will use to render the documentation.</p> <pre><code>git checkout &lt;commit-hash|tag-name&gt;\n</code></pre> <p>After that, we can render the documentation with the following command:</p> <pre><code>mike deploy --update-aliases 0.1 latest\n</code></pre> <p>where <code>0.1</code> is the newly created version, and <code>latest</code> is the alias for the latest version, pointing to <code>0.1</code> in this case.</p> <p>Tips</p> <p>There are some other common options that you can use with <code>mike</code>.</p> <ul> <li><code>--branch</code>: Deploy the documentation to a different branch (default: <code>gh-pages</code>).</li> <li><code>--push</code>: Push the changes to the remote repository. By default, <code>mike</code> will only deploy the documentation to the local repository.</li> </ul> <p>If this is the first deployment, we will also have to make <code>mike</code> redirect the root to the latest version:</p> <pre><code>mike set-default latest\n</code></pre> <p>Similar to the <code>deploy</code> command, the <code>--branch</code> and <code>--push</code> options are also available for the <code>set-default</code> command.</p> <p>After all these steps, the documentation should be properly deployed to the target branch.</p>"},{"location":"getting-started/#test-the-documentation-locally","title":"Test the documentation locally","text":"<p>To properly test the documentation locally, we should stay on the main branch (instead of <code>gh-pages</code>) and call the following command:</p> <pre><code>mike serve\n</code></pre> <p>This will start a local server at <code>http://localhost:8000</code> (by default), and we can see all the versions that have been deployed.</p> <p>Note</p> <p>In my testing environment, it works much slower than the <code>mkdocs serve</code> command. Checking out the <code>gh-pages</code> branch and serving the documentation with <code>python -m http.server</code> works much faster, but I am not sure if there is any potential issue.</p>"},{"location":"examples/","title":"Examples","text":"<p>You can see how are the appearance of the code blocks in the following use cases.</p> <p>Here some common use cases of the SDK are demonstrated. This section is totally the same as the \"Examples\" section in Some Streaming SDK documentation.</p> <ul> <li> <p>Use case 1</p> <p>Some description about the use case that makes it interesting and, more importantly, makes the card not too empty.</p> <p> See the example</p> </li> <li> <p>Use case 2</p> <p>Yet another description about the second use case that, again, makes it interesting and fills the card.</p> <p> See the example</p> </li> </ul>"},{"location":"examples/use-case-1/","title":"Use Case 1","text":"<p>The following is just a ridiculous program generated by Claude.</p> InspirationGenerator.py<pre><code>import random\nfrom typing import List, Tuple\nimport time\n\nclass InspirationGenerator:\n    def __init__(self):\n        self.buzzwords = [\n            \"synergy\", \"paradigm shift\", \"digital transformation\",\n            \"blockchain\", \"AI-powered\", \"cloud-native\", \"quantum\",\n            \"disruptive innovation\", \"machine learning\", \"IoT\"\n        ]\n        self.profound_starts = [\n            \"The key to\", \"The essence of\", \"The future lies in\",\n            \"Success comes from\", \"Innovation begins with\",\n            \"Never underestimate\", \"Always remember that\",\n            \"The secret sauce is\", \"Wisdom teaches us that\"\n        ]\n        self.profound_middles = [\n            \"leveraging\", \"embracing\", \"transforming\",\n            \"revolutionizing\", \"reimagining\", \"disrupting\",\n            \"optimizing\", \"accelerating\", \"empowering\"\n        ]\n        self.profound_ends = [\n            \"in the digital age\", \"for sustainable growth\",\n            \"in the modern ecosystem\", \"at web scale\",\n            \"in the metaverse\", \"with blockchain technology\",\n            \"using neural networks\", \"in real-time\",\n            \"while maintaining work-life balance\"\n        ]\n\n    def generate_quote(self) -&gt; str:\n        return (f\"{random.choice(self.profound_starts)} \"\n                f\"{random.choice(self.profound_middles)} \"\n                f\"{random.choice(self.buzzwords)} \"\n                f\"{random.choice(self.profound_ends)}\")\n\n    def add_emoji_decoration(self, quote: str) -&gt; str:\n        emojis = [\"\u2728\", \"\ud83d\ude80\", \"\ud83d\udca1\", \"\ud83c\udf1f\", \"\ud83c\udfaf\", \"\ud83d\udd2e\", \"\ud83d\udcab\", \"\u2b50\"]\n        return f\"{random.choice(emojis)} {quote} {random.choice(emojis)}\"\n\ndef main():\n    print(\"Welcome to the Corporate Inspiration Generator 3000\u2122\")\n    print(\"Generating life-changing insights...\")\n    time.sleep(1)\n    generator = InspirationGenerator()\n\n    for i in range(5):\n        print(\"\\nGenerating profound wisdom\", end=\"\")\n        for _ in range(3):\n            time.sleep(0.3)\n            print(\".\", end=\"\", flush=True)\n        print(\"\\n\")\n        quote = generator.generate_quote()\n        decorated_quote = generator.add_emoji_decoration(quote)\n        print(decorated_quote)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/use-case-2/","title":"Use Case 2","text":"<p>The following is just a ridiculous program generated by Claude.</p> CorporateJargonGenerator.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;random&gt;\n#include &lt;chrono&gt;\n#include &lt;thread&gt;\n\nclass CorporateJargonGenerator {\nprivate:\n    std::vector&lt;std::string&gt; adjectives = {\n        \"synergistic\", \"disruptive\", \"innovative\", \"blockchain-enabled\",\n        \"AI-driven\", \"cloud-native\", \"quantum-inspired\", \"agile\"\n    };\n\n    std::vector&lt;std::string&gt; nouns = {\n        \"paradigm\", \"solution\", \"framework\", \"ecosystem\",\n        \"platform\", \"pipeline\", \"architecture\", \"methodology\"\n    };\n\n    std::vector&lt;std::string&gt; verbs = {\n        \"leverage\", \"optimize\", \"transform\", \"revolutionize\",\n        \"streamline\", \"accelerate\", \"empower\", \"orchestrate\"\n    };\n\n    std::mt19937 rng;\n\npublic:\n    CorporateJargonGenerator() : rng(std::random_device{}()) {}\n\n    std::string generateBuzzPhrase() {\n        auto getRandomElement = [this](const std::vector&lt;std::string&gt;&amp; vec) {\n            std::uniform_int_distribution&lt;&gt; dist(0, vec.size() - 1);\n            return vec[dist(rng)];\n        };\n\n        return getRandomElement(adjectives) + \" \" +\n               getRandomElement(nouns) + \" to \" +\n               getRandomElement(verbs) + \" your business\";\n    }\n\n    void displayWithSpinner() {\n        std::cout &lt;&lt; \"Generating revolutionary business insights\";\n        for (int i = 0; i &lt; 3; ++i) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(500));\n            std::cout &lt;&lt; \".\" &lt;&lt; std::flush;\n        }\n        std::cout &lt;&lt; \"\\n\\n\ud83d\ude80 \" &lt;&lt; generateBuzzPhrase() &lt;&lt; \" \ud83d\udcab\\n\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    std::cout &lt;&lt; \"Welcome to the Enterprise Jargon Generator 5000\u2122\\n\" &lt;&lt; std::endl;\n\n    CorporateJargonGenerator generator;\n\n    for (int i = 0; i &lt; 5; ++i) {\n        generator.displayWithSpinner();\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n\n    std::cout &lt;&lt; \"\\nThank you for leveraging our synergistic solution!\\n\";\n    return 0;\n}\n</code></pre>"}]}